1.可以使用常量来替换代码中的实际内容，避免写错
2.控件的ID,按照页面，功能，来指定，如 页面_功能XXX 这种ID
(android:.+)="(.+)"
<item name="$1">$2</item>
3.FragmentStatePagerAdapter在切换Fragment的时候，移除去的Fragment会被销毁
4.FragmentPagerAdapter 在切换Fragment的时候。移除去的Fragment
只会调用到onDestroyView
5.在Fragment内部创建的FragmentPagerAdapter,构造方法中的FragmentPagerAdapter
参数，getChildFragmentManager()创建
6.带有返回值的方法，推荐只有一个return；
7.现在服务器接口开发的时候，将网址定义成非常规则的，网址就像文件夹一样
  看到就知道什么含义；GET ，POST，PUT请求都定义好对应的功能；
  这种方式通常称作REST风格
8.代码的提取：重复代码的提取(消重);接口：用于控制类必须要包含的方法；
  抽象类：可以定义多个类公共的代码，也可以让每一个子类实现特有的方法；
9.关于JSON解析，谁的数据，谁自己来解析;
10.默认情况下，ListView，认为每一个Item的类型是相同的，所以每一个布局都能复用；
如果Item的布局是不同的，这个时候，必须设置Adapter中两个方法，来检查Item的布局类型，
如果不进行设置，那么布局就混乱了。
错乱的原因是ConvertView被设置错了
11.当BaseAdapter，重写getViewTypeCount()的方法，返回数值>1的时候那么ListView内部
，就会自动创建出来视图缓冲区，实际上就是个数组
ArrayList<View>[] buffer = new ArrayList<View>[getViewTypeCount];
这个缓冲区就是用于存储可以复用的视图
当Item从ListView可见区域移出去的时候
就会检查item 对应 ViewType；就相当于数组的索引
例如 返回0，就把View 添加到buffer[0].add(View)
有Item需要加载和显示的时候，先检查这个Item的对应的视图类型ViewType
例如 返回0，代表ListView需要从缓冲区buffer[0]来查找是否右视图
    返回1，ListView就会先去buffer[1]查找视图
12.ListView 中的Item的点击规则
ListView Item中，如果有任何可以接受用户输入的控件，
例如 Button , ImageButton ,EditText,CheckBox等等
那么ListView自身Item的点击事件回调,onItemClick 就不会在调用了
长按效果也就没有了;
因为ListView自身会检查每一个Item的事件传递，如果Item内部包含可以获取焦点的控件，以及可以和用户
//TODO:笔记


事件不处理，就导致没有任何点击效果
如何实现:Item可以点击，并且内部按钮也可以点击;
       两种方式：
       1)在Item的布局中，最顶级标签中 加入

       android:descendantFocusability="blocksDescendants"
       作用blocksDescendants代表
       ListView的Item的布局把焦点拦截了
       即使内部还有可以获取焦点控件，事件也不会传递，
       直接由Item来处理点击
       按钮的点击即使没有焦点，因为使用touch触摸事件,
       能够在没有焦点情况下，直接传递给相应的按钮，依然可以实现点击；
       2)第二种方式：将Item中，所有可以获取焦点的控件设置属性
       android:focusable="false"就可以，但是需要设置多个
       //TODO:笔记
13.Item中按钮，CheckBox等控件需要进行事件处理的时候
       因为事件回调接口自身
       //TODO:笔记

14.建议 异步任务在进行网络请求之前，
需要检查当前手机是否有网络连接
1)每次执行异步任务的时候，都需要检查网络连接
2)





































